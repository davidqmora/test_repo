@using System.Text.Json
@using Microsoft.Identity.Web
@using WebUI.Model

<MudStack Spacing="3"
          AlignItems="AlignItems.Start"
          Class="pa-3">
    <MudButton Variant="Variant.Filled"
               OnClick="@GetAccountStatus">
        Get Status
    </MudButton>
<MudPaper Class="mt-4">
    <pre>
        <code>
            @status
        </code>
    </pre>
</MudPaper>
</MudStack>


@inject ILocalAccountService LocalAccountService
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@code {
    [Parameter] 
    public EventCallback<RequiredProperties> OnPropertiesChanged { get; set; }
    
    private string? status;

    private async Task GetAccountStatus()
    {
        try
        {
            status = null;
            StateHasChanged();
            
            var response = await LocalAccountService.GetAccountStatus(CancellationToken.None);
            if (response.IsSuccessStatusCode)
            { 
                var jsonContent = await response.Content.ReadAsStringAsync();

                using var jsonDoc = JsonDocument.Parse(jsonContent);
                status = JsonSerializer.Serialize(jsonDoc, new JsonSerializerOptions { WriteIndented = true });

                var missingProperties = jsonDoc
                    .RootElement
                    .GetProperty("required_missing_properties")
                    .Deserialize<RequiredProperties>();
                await OnPropertiesChanged.InvokeAsync(missingProperties);
            }
            else
            {
                status = response.ReasonPhrase;
            }
        }
        catch (Exception e)
        {
            ConsentHandler.HandleException(e);
        }
    }
}