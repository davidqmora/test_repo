@page "/"
@using WebUI.Services

<AuthorizeView>
    <Authorized>
        <MudStack Row 
                  Spacing="3" 
                  AlignItems="AlignItems.Start"
                  Class="pa-3">
            <MudButton Variant="Variant.Filled"
                       OnClick="@GetMyPhotos">
                Get My Photo Ids
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       OnClick="@GetMyMarkers">
                Get My Photo Markers
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       OnClick="@GetMyVoteForPic">
                Get My Vote For Photo
            </MudButton>
            <MudButton Variant="Variant.Filled">
                Edit My Profile
            </MudButton>
        </MudStack>
        <MudPaper MaxHeight="300px"
                  Class="overflow-scroll">
            @foreach (var message in Messages)
            {
                <MudText>@message</MudText>
            }
        </MudPaper>
    </Authorized>
    <NotAuthorized>
        <MudMainContent>
            <MudCard>
                <MudCardContent>
                    <MudText>
                        Authorized access required
                    </MudText>
                    <MudText>
                        This application requires authorized access. If you feel you should be able to see the content,
                        please reach out to Cloud Services Team (Slack: #cloud-services) for assistance.
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudMainContent>
    </NotAuthorized>
</AuthorizeView>


@using Microsoft.Identity.Web
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject IPhotoShareService PhotoShareService

@code {
    private List<string> Messages { get; } = [];


    private async Task GetMyPhotos()
    {
        try
        {
            var response = await PhotoShareService.GetMyPhotos(CancellationToken.None);
            var ids = await response.Content.ReadAsStringAsync();
            Messages.Add($"GetPhotos ({response.StatusCode}): {ids}");
            StateHasChanged();
        }
        catch (Exception e)
        {
            ConsentHandler.HandleException(e);
        }
    }

    private async Task GetMyVoteForPic()
    {
        try
        {
            const string photoId = "2SGMuntHXOHJBtn0n0Ejt,EmF4dgI9DRJIQ8VMKN8bi";
            var response = await PhotoShareService.GetMyVoteForPhoto(photoId, CancellationToken.None);
            var vote = await response.Content.ReadAsStringAsync();
            Messages.Add($"GetMyVote ({response.StatusCode}): {vote}");
            StateHasChanged();
        }
        catch (Exception e)
        {
            ConsentHandler.HandleException(e);
        }
    }

    private async Task GetMyMarkers()
    {
        try
        {
            var response = await PhotoShareService.GetMyMarkers(CancellationToken.None);
            var markers = await response.Content.ReadAsStringAsync();
            Messages.Add($"GetMyMarkers ({response.StatusCode}): {markers}");
            StateHasChanged();
        }
        catch (Exception e)
        {
            ConsentHandler.HandleException(e);
        }
    }

}