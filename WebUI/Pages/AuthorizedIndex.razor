@page "/AuthorizedIndex"


<AuthorizeView>
    <Authorized>
        <MudStack Row 
                  Spacing="3" 
                  AlignItems="AlignItems.Start"
                  Class="pa-3">
            <MudButton Variant="Variant.Filled"
                       OnClick="@GetMyVoteForPhoto">
                Get My Vote For Photo
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       OnClick="@GetCommentsForPhoto">
                Get Comments For Photo
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       OnClick="@GetDataForPhoto">
                Get Photo Data
            </MudButton>
            @* <MudButton Variant="Variant.Filled"> *@
            @*     Edit My Profile *@
            @* </MudButton> *@
        </MudStack>
        <MudPaper MaxHeight="300px"
                  Class="overflow-scroll">
            @foreach (var message in Messages)
            {
                <MudText>@message</MudText>
            }
        </MudPaper>
    </Authorized>
    <NotAuthorized>
        <MudMainContent>
            <MudCard>
                <MudCardContent>
                    <MudText>
                        Authorized access required
                    </MudText>
                    <MudText>
                        This application requires authorized access. If you feel you should be able to see the content,
                        please reach out to Cloud Services Team (Slack: #cloud-services) for assistance.
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudMainContent>
    </NotAuthorized>
</AuthorizeView>


@using System.Text.Json
@using Microsoft.Identity.Web
@using WebUI.Model
@using WebUI.Services
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject IPhotoShareService PhotoShareService

@code {
    private List<string> Messages { get; } = [];


    private async Task GetMyVoteForPhoto()
    {
        try
        {
            const string photoId = "2SGMuntHXOHJBtn0n0Ejt,EmF4dgI9DRJIQ8VMKN8bi";
            var response = await PhotoShareService.GetMyVoteForPhoto(photoId, CancellationToken.None);
            var vote = await response.Content.ReadAsStringAsync();
            Messages.Add($"GetMyVote ({response.StatusCode}): {vote}");
            StateHasChanged();
        }
        catch (Exception e)
        {
            ConsentHandler.HandleException(e);
        }
    }

    private async Task GetCommentsForPhoto()
    {
        try
        {
            const string photoId = "2SGMuntHXOHJBtn0n0Ejt,EmF4dgI9DRJIQ8VMKN8bi";
            var response = await PhotoShareService.GetCommentsForPhoto(photoId, CancellationToken.None);
            Messages.Add($"GetComments ({response.StatusCode}): ");
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                StateHasChanged();
                return;
            }

            var comments = await response.Content.ReadFromJsonAsync<List<PhotoComment>>();
            if (comments != null)
            {
                if (comments.Count == 0)
                {
                    Messages.Add("  No comments");
                }
                else
                {
                    foreach (var comment in comments)
                    {
                        Messages.Add($"  {comment.DisplayName}: {comment.Message}");
                    }
                }
            }

            StateHasChanged();
        }
        catch (JsonException e)
        {
            Messages.Add("Unable to parse response");
        }
        catch (Exception e)
        {
            ConsentHandler.HandleException(e);
        }
    }

    private async Task GetDataForPhoto()
    {
        try
        {
            // const string photoId = "2SGMuntHXOHJBtn0n0Ejt,EmF4dgI9DRJIQ8VMKN8bi";
            const string photoId = "003hEGOBTv";
            var response = await PhotoShareService.GetDataForPhoto(photoId, CancellationToken.None);
            Messages.Add($"GetData ({response.StatusCode}): ");
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                StateHasChanged();
                return;
            }

            var data = await response.Content.ReadFromJsonAsync<PhotoData>();
            // if (data != null)
            // {
            //     Messages.Add($"  {comment.DisplayName}: {comment.Message}");
            // }
            var dataRaw = await response.Content.ReadAsStringAsync();
            Messages.Add($"  {dataRaw}");

            StateHasChanged();
        }
        catch (JsonException e)
        {
            Messages.Add("Unable to parse response");
        }
        catch (Exception e)
        {
            ConsentHandler.HandleException(e);
        }
    }

}