@page "/photoshare"
@using Microsoft.Identity.Web
@using WebUI.Model

@* // Get current status for user. *@
@* // If enabled, show "stuff". Maybe a carousel with pics. *@
@* // If not enabled, show missing properties dialog. *@
@* //    Upon submission, get status again. Repeat. *@
@if (accountStatus is null && !usingMockServices)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Size="Size.Small"/>
}
<MudStack row
          AlignItems="AlignItems.Start"
          Justify="Justify.SpaceBetween">

    @if (accountStatus is null)
    {
        <MudSpacer/>
    }
    else if (accountStatus.UserStatus == UserStatus.Enabled)
    {
        <MudText Typo="Typo.h2">User is Enabled</MudText>
    }
    else
    {
        <MudContainer MaxWidth="MaxWidth.Small">
            <MudPaper Class="pa-8 mt-8">
                <MudStack>
                    <MudText Typo="Typo.h4">We need a bit more info</MudText>
                    <MudText>Please provide the following information to enable full access to the PhotoShare feature.</MudText>
                    <UserProfileForm AccountStatus="@accountStatus" OnTouRequested="TouRequested" OnPropertiesSubmitted="RequirePropertiesSubmitted"/>
                </MudStack>
            </MudPaper>
        </MudContainer>
    }

    @if (usingMockServices)
    {
        <MudPaper Width="500px" Height="100%">
            <MudStack Class="pa-4"
                      Spacing="2">
                <MudText Typo="Typo.h6">PhotoShare Account Settings</MudText>
                <MudDivider Class="mb-2"/>
                <UseCaseSelector/>
                <MudButton Class="btn btn-primary mt-2"
                           Variant="Variant.Filled"
                           OnClick="@GetAccountStatus">
                    Get Account Status
                </MudButton>
            </MudStack>
        </MudPaper>
    }
</MudStack>

@inject IUserAccountService UserAccountService
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject IDialogService DialogService
@inject IConfiguration Configuration

@code {

    private AccountStatus? accountStatus;
    private bool usingMockServices;

    protected override void OnInitialized()
    {
        _ = bool.TryParse(Configuration["useMockApi"] ?? "false", out usingMockServices);

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!usingMockServices && firstRender)
        {
            await GetAccountStatus();
        }
    }

    [AuthorizeForScopes(ScopeKeySection = "AccountsApi:ApiReaderScope")]
    private async Task GetAccountStatus()
    {
        try
        {
            accountStatus = await UserAccountService.GetStatus(CancellationToken.None);
            if (accountStatus is not null)
            {
                if (accountStatus.UserStatus == UserStatus.Enabled)
                {
                    Console.WriteLine("User enabled");
                }
                else
                {
                    Console.WriteLine("User not enabled");
                }

                StateHasChanged();
            }
            else
            {
            }
        }
        catch (Exception e)
        {
            ConsentHandler.HandleException(e);
        }
    }

    private void TouRequested()
    {
        DialogService.Show<TouDialog>();
    }

    private async Task RequirePropertiesSubmitted(UserProfile profile)
    {
        if (await UserAccountService.UpdateProfile(profile, CancellationToken.None))
        {
            accountStatus = await UserAccountService.GetStatus(CancellationToken.None);
        }
    }

}